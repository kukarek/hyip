import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import Message
from aiogram.utils import executor
from aiogram.types import CallbackQuery
import sql
import keyboards
from config import API_TOKEN, ADMINS, MAIN_MESS, CHOOSE_MESS, HELP

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

def admin(id):
    for admin in ADMINS:
        if admin == id:
            return True
    return False

    
@dp.callback_query_handler(lambda query: query.data.startswith("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ö–∞–π–ø—ã"))
async def on_button1_click(query: CallbackQuery):
    
    user_id = int(query.data.split("_")[1]) #–∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
    message_id = int(query.data.split("_")[2]) #id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    
    keyboard = await keyboards.hyip_list_keyboard(action="–ø—Ä–æ—Å–º–æ—Ç—Ä", user_id=user_id, message_id=message_id)

    await bot.edit_message_text(text=CHOOSE_MESS, chat_id=user_id, message_id=message_id, reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data.startswith("–ó–∞–ø—Ä–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"))
async def on_button1_click(query: CallbackQuery):
    
    user_id = int(query.data.split("_")[1]) #–∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
    message_id = int(query.data.split("_")[2]) #id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    
    sql.set_status(user_id=user_id, status="F")

    keyboard = await keyboards.main_keyboard(user_id=user_id, message_id=message_id, status="F")

    await bot.edit_message_text(text=MAIN_MESS, chat_id=user_id, message_id=message_id, reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data.startswith("–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"))
async def on_button1_click(query: CallbackQuery):
    
    user_id = int(query.data.split("_")[1]) #–∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
    message_id = int(query.data.split("_")[2]) #id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    
    sql.set_status(user_id=user_id, status="T")

    keyboard = await keyboards.main_keyboard(user_id=user_id, message_id=message_id, status="T")
    await bot.edit_message_text(text=MAIN_MESS + "\n\n–ë–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –≤–∞—Å –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö!", chat_id=user_id, message_id=message_id, reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data.startswith("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def on_button1_click(query: CallbackQuery):
    
    user_id = int(query.data.split("_")[1]) #–∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
    message_id = int(query.data.split("_")[2]) #id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    
    status = sql.get_status(user_id=user_id)[0]

    keyboard = await keyboards.main_keyboard(user_id=user_id, message_id=message_id, status=status)

    await bot.edit_message_text(text=MAIN_MESS, chat_id=user_id, message_id=message_id, reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data.startswith("–ø—Ä–æ—Å–º–æ—Ç—Ä"))
async def on_button1_click(query: CallbackQuery):
    
    user_id = int(query.data.split("_")[1]) #–∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
    message_id = int(query.data.split("_")[2]) #id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    hyip_project_name = query.data.split("_")[3] #–∏–º—è –ø—Ä–æ–µ–∫—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª–∏

    project = sql.get_hyip_project(name=hyip_project_name)

    info = generate_hyip_info(project)

    keyboard = await keyboards.hyip(project[0][8], user_id=user_id, message_id=message_id)

    await bot.edit_message_text(text=info, chat_id=user_id, message_id=message_id, reply_markup=keyboard)

#–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–¥ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
def generate_hyip_info(hyip):

    rating = ""
    i = 0
    while i < int(hyip[0][1]):
        rating += "‚≠êÔ∏è"
        i += 1

    mess = (f"–†–µ–π—Ç–∏–Ω–≥:\n{rating}\n\n"+
            f"‚ô®Ô∏è{hyip[0][2]}‚ô®Ô∏è\n\n"+
            f"üèÅ–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {hyip[0][3]}\n\n"+
            f"üìä–ü–ª–∞–Ω: {hyip[0][4]}\n\n"+
            f"üíµ–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: {hyip[0][5]}\n\n"+
            f"üí∏–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: {hyip[0][6]}\n\n"+
            f"üìà–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞—à–∏—Ö –∞–¥–º–∏–Ω–æ–≤: {hyip[0][7]}\n\n")
    
    return mess

async def sendall(message):
    #–ø—Ä–∏–Ω–∏–º–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–æ—Ä—Ç–µ–∂–µ–π –∏–∑ –±–¥
    users = sql.get_users_for_notify()
    
    for user in users:
        try:
            await bot.send_message(user[0], message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —é–∑–µ—Ä—É: {e}")

@dp.message_handler(commands=['start'])
async def on_start(message: Message):
    #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sql.add_user(message.from_id)
    status = sql.get_status(message.from_id)
    #–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    mess = await message.answer("ü•≥–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ!ü•≥\n\n" + MAIN_MESS)
    keyboard = await keyboards.main_keyboard(user_id=message.from_id, message_id=mess.message_id, status=status[0])
    await bot.edit_message_reply_markup(chat_id=message.from_id, message_id=mess.message_id, reply_markup=keyboard)

@dp.message_handler(commands=['help'])
async def on_start(message: Message):

    if admin(message.from_id):

        await message.answer(HELP)
    

#–≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –±—ã–ª–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é    
async def admin_panel(message):

    if admin(message.from_id):
        #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        #–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ
        if "add" == message.text.split(" ", 1)[0]:
            admin_id = int(message.text.split(" ")[1])
            ADMINS.append(admin_id)
            await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å id: {admin_id}")
            return True
        
        elif message.text == "user amount":
            
            #–ø—Ä–∏–Ω–∏–º–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–æ—Ä—Ç–µ–∂–µ–π –∏–∑ –±–¥
            users = sql.get_all_users()
            notify_users = sql.get_users_for_notify()

            await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"+
                                 f"–í–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞: {len(notify_users)}")
            return True
        
        #–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ
        elif "sendall" in message.text.split("\n", 1)[0]:
            
            #–±–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã sendall
            mess = message.text.split("\n", 1)[1]
            
            await sendall(mess)

            return True

        elif "add_hyip" == message.text.split("\n", 1)[0]:

            try:
                mess = message.text.split("\n")

                sql.add_hyip_project(rating=mess[1],
                                    name=mess[2],
                                    start_date=mess[3],
                                    plan=mess[4],
                                    min_deposit=mess[5],
                                    payment=mess[6],
                                    forecast=mess[7],
                                    link=mess[8])
            except Exception as e:
                await message.answer(e)
            return True
        
        elif "delete_hyip" == message.text.split("\n", 1)[0]:

            try:
                mess = message.text.split("\n")

                sql.delete_hyip_project(name=mess[1])
            except Exception as e:
                await message.answer(e)
            return True
            
        
    return False

@dp.message_handler()
async def echo(message: Message):
    
    try:
        if await admin_panel(message):
            return
    except Exception as e:
        await message.answer(e)
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ!")

def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    sql.create_connection()
    executor.start_polling(dp, skip_updates=True)

if __name__ == '__main__':
    main()